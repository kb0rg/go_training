day one

https://github.com/ardanlabs/gotraining/tree/master/topics/courses/go

MECHANICAL SYMPATHY
the model is the machine: remember the hardware is our platform.
sympatheitc to the hardware.

engineering is about understanding the decisions you're making, the costs you're taking

MAKE SURE YOUR MENTAL MODEL IS CLEAR

dedicate time every sprint to refactoring.

logs > debuggers
debugger can become a crutch. in production can't use debugger, can only rely on logs. if logs aren't enough to diagnose a problem in dev, they're not going to be good enough in prod.

more important than performance? 
productivity




MORE IMPORTANT TO LEARN HOW TO READ CODE THAN WRITE

correctness vs performance
until you have a working program you really *don't know* how performant it will be. 
get working code first. make it readable (think about: what is the legacy you're leaving behind?)

we only learn when we make mistakes

INTEGRITY

become very serious about reliability.

- every allocation, read, and write of memory should be consistent and efficient
- every problem we solve is a data transformation, every transformation should be consistent and efficient

if software loses integrity, it's moral imperitive to shut it down

WRITE LESS CODE

every 1000 lines of code has 15-50 bugs.
every 20 lines has a bug
to reduce bugs? reduce amount of code

EVERY DAY: REVIEW. REFACTOR.

ERROR HANDLING

if error handling is treated as an exception and not part of main code, majority of critical failures are due to error handling

READABILITY

simple code that is easy to read and understabd.
not hiding the impact the cost the code is having

SIMPLICITY

is about hiding complexity -- is this at odds with readability?

PERFORMANCE

must compute less to get the results we need


types. without type there can be no integrity



POINTERS
https://github.com/ardanlabs/gotraining/blob/master/topics/go/language/pointers/README.md


main go routine
thread is a path of execution scheduled on a core
every go routine is given a piece of memory called the stack

three types of memory: 
- data segment (not relevant to this course)
- stack
- heap

go routine (a co-routine) operates on the stack. each stack = 2k
stack frame: frame of memory taken off the stack

PASS BY VALUE example:
https://play.golang.org/p/JJMHWiZ9h9

(*get in the habit of drawing stack frames*)

function call crosses over a program boundary. gets its own frame. data the function needs has to be inside that frame, or it won't have access to it. needs its own copy of data in order to operate

(implementation detail: stacks work down in go)

address of data in function frame will be lower in memory than address of original var, because it's in a lower stack frame

all memory above (and including) active stack frame is valid
anything below is invalid
when we return from a function, move the active frame back up.

stacks are cheap to use bc they are self-cleaning, garbage collector doesn't have to get involved

every function call moves the stack down. 

pointers serve one function: sharing.

pointer variables allow us to store address. 
(pointers are not a named type. they are a literal)
they all store the same type of value: an address

(same example modified to use pointer):
https://play.golang.org/p/y_FHIdUbAw

(? clarify this? )
"*" in func signature denotes ...
"*" in func call denotes ...

run in go playground to note address of pointer does not change as value of pointer changes


factory function:
https://play.golang.org/p/KRKrUCcTYe

creates a value and initializes for use, returns that value back

v2 uses pointers:
https://play.golang.org/p/VoQBQk8ijj

go compiler performs escape analysis:
- determines whether a value gets to stay on the stack, or whether it has to escape

line 42 we construct a value, but construction tells us nothing about where value will end up (stack or heap)

default is to put it on the stack, but we can't always do that.

line 49 is where we indicate we should share this value up the call stack. escape analysis determines we can't leave the value on the call stack: it goes to the heap.

a function only has direct memory access to values on its own stack frame. so how does it access values on the heap?
through pointer access. in this context, "u" is a pointer to a value on the heap


engineering decision:
- should we be using Value Semantics or Pointer Semantics?
- type drives the semantic, everything else follows

reasons why a value could allocate:
- compiler determines the size of every stack frame at compile time.
- if compiler doesn't know the size of a value at compile time, it can't be placed on the stack
- what happens when you run out of stack space? go uses contiguous stacks. it will create a new stack, ~ 25% greater in size. but everything from the old stack has to be copied to the new stack - which means values on stacks can potentially have a new location

example of stack-hopping:
https://play.golang.org/

change "const size = 10" --> const size = 1024 and re-run:
string changes memory location

no go-routine can have a pointer to another go-routines stack. stacks are exclusive. to share info between go-routines, that info has to end up on the heap

it is ok for heap allocation to happen, sometimes it needs to happen. there are cases when you can write zero-allocation algorithms, but you will not be writing zero-allocation code. 

GARBAGE COLLECTION

the heart of go's garbage collection is its pacing.
GOGC variable: don't play with that unless you *really* understand the engineering decision you're making

trades performance for low latency.

if you grow the heap, the GC has to run more.
GC tries to keep the Live heap approx half size of heap itself.

GC has its own set of go routines. can eat up to 25% of available CPU while it's running.

go-routines that are producing more garbage may be co-opted to collect garbage for the other routines

heap is a graph of values, connected to each other by pointers

mark & sweep:
black: in use
white: not in use
gray: re-scan (removed in v 1.8)

what is a memory leak in go?
- creating extra go routines, not in use, that are holding onto their references?
- forget to call close?
- just start commenting out code, see where the allocations stop.



CACHE

(benchmarking examples to illustrate):
https://github.com/ardanlabs/gotraining/tree/master/topics/go/testing/benchmarks

example code creates a matrix & a linked list

run benchmarking on same code applied to:
linked list traverse - slow but consistent
matrix column traverse - slow, inconsistent
matrix row traverse - consistently MUCH faster than the other two


(watch Scott Meyers videos)
https://github.com/ardanlabs/gotraining/blob/master/topics/go/language/arrays/README.md

main memory is slow. 
if performance matters, effective memory == CPU cache memory

everything in L1 & L2 also in L3 cache

small is fast

caches are in place to hide latency cost of accessing from main memory. but the info needs to be in the cache ahead of when it's needed, or you'll hit main anyway.

pre-fetchers actively fetch items to put in the cache
create a predictable access pattern in your code
array is the most important ds we have today as it relates to the hardware: walking the array is a predictable stride

TLB cache?
creates mapping betw virtal memory and physical memory
(* revisit this re paging *)

back to example:
linked list: decent chance data is on same page
column traversal: most likely uses different pages
row traversal: predictable access patterns. contiguous memory

what data structure you choose impacts performance

in go, "slice" (== array ??) == predictable memory access pattern, so slice should be heavily relied upon in go
as core data structure:
arrays are mechanically sympathetic to the hardware.

(not always true -- but true often enough)

go wants to push you in the direction of mechanical sympathy with the hardware you're on


https://github.com/ardanlabs/gotraining/tree/master/topics/go/language/arrays

^ cache diagrams


DATA-ORIENTED DESIGN PHILOSOPHY

https://github.com/ardanlabs/gotraining/tree/master/topics/go#data-oriented-design

OOP is not efficient in go. parent/ child relationships create trees, but in go "you don't have a VM to save your ass"

IF YOU DON'T UNDERSTAND THE DATA YOU'RE WORKING WITH, YOU DON'T UNDERSTAND THE PROBLEM

a string in go is a two-word data structure:
- first word is an address (pointer to some array of bytes), second is the number bytes
- often initialized as 0
- strings can be placed on stacks, bc we know the size

https://play.golang.org/p/wUzREuHhLY

Pointer Semantics/ Value Semantics

iterating over the for/ range:
creates multiple copies of the Pointer to the string's value (backing array?), while the string value itself has only one copy in the heap. sharing the pointers like this keeps the heap clean.

Value semantics w/ for range ranges over its own COPY of the array, not the array itself. 

Pointer Semantics ranges over the pointers, always points to the same value.

Change in semantics can change the outcome of the program. 
THINK ABOUT which semantics you need

DO NOT MIX SEMANTICS. 


Arrays vs Slices:
https://github.com/ardanlabs/gotraining/tree/master/topics/go/language/slices

size of an array is part of its type information
slice has an array-like syntax
(? there is no value when setting the slice with make ?) 

slice is a THREE-word data structure:
- first word is an address (pointer to backing array)
- second is the length of slice (# of elements you can read and write to)
- capacity (total # of elements that exist from that position) - there for efficient growth. can not access an index of a slice beyond its current length.

gives us the mechanical sympathies of an array, plus flexibility, room for growth.

syntactic sugar makes slice *look* like an array

EMPTY VS NIL

empty != nil
(revisit this)

- nil slice is still a 3-word data structure. all 3 parts are set to 0 (nil, 0, 0)

- empty literal does not create a zero-value slice, it creates an *empty* slice: (pointer, 0, 0). 
pointer in an empty slice points to EmptyStruct

using var guarantees a zero value. 

recommend using value semantics when working with slices

slice append uses value semantics: does not mutate a shared array. append api uses value semantics. mutates and returns a new copy.


