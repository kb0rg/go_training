day two


EMBEDDING/ DECOUPLING

https://github.com/ardanlabs/gotraining/tree/master/topics/go/language/embedding


https://play.golang.org/p/7Ei_9niqPQ
embedding a value of type user inside values of type admin
think of it as outer/ inner type

inner type promotion:
can access the inner value directly, can ALSO access the inner value's method in the outer type

outer type can satisfy same contracts as outer types

inner type promotion doesn't happen until you access something from the outer type

embedding != OOP
we embed a type bc we want that type's behavior
(if we want to group data by some common dna, that dna has to be configured.
stop thinking about trying to group things by common state)

get things working in the concrete before creating interfaces. 
refactoring: process of asking yourself "how do we decouple this"?
solve one problem at a time
only add complexity as you need to, not before


COMPOSITION
https://github.com/ardanlabs/gotraining/blob/master/topics/go/design/composition/README.md

interface types are valueless.
type doesn't matter.
you pass any concrete data into interfaces, as long as the data satisfies the contract that the interface expects.


nil can only be a pointer set to zero value or a reference type set to zero value.
nil always takes on the type it needs. 

using nil for error checking: err != nil means there is no error value stored

don't use else: do your negative path processing inside the ifs


don't use logging as an insurance policy
logging is expensive. uses allocation, therefore adding garbage to the heap. just log the things you absolutely need. 

guidelines for when/ where to log:
- if you can say the logs serve one purpose (debugging)

improve the signal/ noise ratio in your logs

logging should happen where the error handling happens. each step lower in the stack should wrap the error in some context before passing it up the stack.

errors package does this context wrapping:
github.com/pkg/errors

Cause function unwinds the wrapper to get the context, produces the stack trace

example here:
https://play.golang.org/p/VfqgeCH-v2


CONCURRENCY

https://github.com/ardanlabs/gotraining/tree/master/topics/courses/go/concurrency

thread is a path of execution

can be in one of 3 basic states:
executing
runnable
waiting

context switches are expensive. create a state of latency

NUMA: 
non-uniform memory access
gives every proc its own local bank of memory
solves the scale issue, but causes the issue of unknown latency to main memory.
usually a non-issue until you're dealing with huge quantities of data

scheduler has to understand about NUMA to make sure everything is running as efficiently as possible. 





